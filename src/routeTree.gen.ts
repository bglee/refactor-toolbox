/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as HelpRouteImport } from './routes/help'
import { Route as Dev_toolsRouteImport } from './routes/dev_tools'
import { Route as Ast_power_searchRouteImport } from './routes/ast_power_search'
import { Route as IndexRouteImport } from './routes/index'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const HelpRoute = HelpRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any)
const Dev_toolsRoute = Dev_toolsRouteImport.update({
  id: '/dev_tools',
  path: '/dev_tools',
  getParentRoute: () => rootRouteImport,
} as any)
const Ast_power_searchRoute = Ast_power_searchRouteImport.update({
  id: '/ast_power_search',
  path: '/ast_power_search',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ast_power_search': typeof Ast_power_searchRoute
  '/dev_tools': typeof Dev_toolsRoute
  '/help': typeof HelpRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ast_power_search': typeof Ast_power_searchRoute
  '/dev_tools': typeof Dev_toolsRoute
  '/help': typeof HelpRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/ast_power_search': typeof Ast_power_searchRoute
  '/dev_tools': typeof Dev_toolsRoute
  '/help': typeof HelpRoute
  '/settings': typeof SettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/ast_power_search' | '/dev_tools' | '/help' | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/ast_power_search' | '/dev_tools' | '/help' | '/settings'
  id:
    | '__root__'
    | '/'
    | '/ast_power_search'
    | '/dev_tools'
    | '/help'
    | '/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Ast_power_searchRoute: typeof Ast_power_searchRoute
  Dev_toolsRoute: typeof Dev_toolsRoute
  HelpRoute: typeof HelpRoute
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dev_tools': {
      id: '/dev_tools'
      path: '/dev_tools'
      fullPath: '/dev_tools'
      preLoaderRoute: typeof Dev_toolsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ast_power_search': {
      id: '/ast_power_search'
      path: '/ast_power_search'
      fullPath: '/ast_power_search'
      preLoaderRoute: typeof Ast_power_searchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Ast_power_searchRoute: Ast_power_searchRoute,
  Dev_toolsRoute: Dev_toolsRoute,
  HelpRoute: HelpRoute,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
